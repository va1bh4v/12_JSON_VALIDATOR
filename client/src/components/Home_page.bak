let strData

function takeValidator() {
    const content = document.querySelector('.content');
    const [file] = document.querySelector('input[type=file]').files;
    const reader = new FileReader();
    let data



    reader.addEventListener("load", () => {

        strData = reader.result
        data = JSON.parse(strData)
        // console.log(data)
        const name = file['name']
        // const content = JSON.stringify(data)
        // adding name to json

        const new_data = { name: name, data: data }

        console.log(data)
        fetch('http://localhost:5001/api/validator', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(new_data)
        })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch((error) => {
                console.error('Error:', error);
            });



        for (const key in data) {
            if (data.hasOwnProperty(key)) {
                // console.log(`${key}: ${data[key]}`);
                // console.log(key, data[key])
                // for(const subkey in data[key]){
                //     if(data[key].hasOwnProperty(subkey)){
                //         // console.log(`${key}: ${data[key][subkey]}`)
                //         console.log(data[key][subkey])
                //     }
                // }
            }
        }
    }, false);


    if (file) {
        reader.readAsText(file);
    }


}

function validateFile() {
    const content = document.querySelector('.content');
    const [file] = document.querySelector('input[type=file]').files;
    const reader = new FileReader();

    if (file) {
        reader.readAsText(file);
    }

    reader.addEventListener("load", () => {
        strData = reader.result
        // console.log(JSON.parse(strData))
        const new_data = JSON.parse(strData)
        // console.log(file['name'])
        fetch('http://localhost:5001/api/grammar', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        })
            .then(response => response.json())
            .then(data => {
                console.log("fetched validator data")

                // checking if all tags are valid tags
                const invalid_array = []
                for (const key in new_data) {
                    if (new_data.hasOwnProperty(key)) {
                        if (data[0].data.hasOwnProperty(key)) {
                            // tag is present in validator
                        }
                        else {
                            invalid_array.push(key)
                        }
                    }
                }

                console.log("invalid tags: ", invalid_array)

                //creating list of mandatory tags
                const mandatory_array = []
                for (const key in data[0].data) {
                    if (data[0].data[key]["req"] == "mandatory") {
                        mandatory_array.push(key);
                    }
                }

                const should_be_non_empty = []
                for (const key in new_data) {
                    if (mandatory_array.includes(key)) {
                        if (new_data[key] === "") {
                            should_be_non_empty.push(key);
                        }
                    }

                }
                console.log("shoule not be empty: ", should_be_non_empty)

                // checking of data types
                const wrongData = []
                let i = 0
                for (const key in new_data) {
                    if (data[0].data.hasOwnProperty(key) && new_data[key] != "") {
                        i = 0
                        i = checktype(new_data[key], data[0].data[key]["typeof"])
                        if (i == 1) {
                            // console.log(key,"validated of type: ",data[0].data[key]["typeof"])
                        }
                        else {
                            console.log(key, "does not match, expected: ", data[0].data[key]["typeof"], "found: ", new_data[key])
                        }
                    }
                }



            })
            .catch((error) => {
                console.error('Error:', error);
            });

    }, false);
}

function checktype(data, type) {
    // console.log(typeof(data),"<==>",type)
    if (type == "object") {
        if (typeof (data) == "object") {
            return 1
        }
        else {
            return 0
        }
    }
    else if (typeof (data) == "object") {
        let i = 0
        // console.log("got an object")
        for (const key in data) {
            i = 0
            i = checktype(data[key], type)
            if (i == 0) {
                return 0
            }
        }
        return 1
    }
    else if (type == "string") {
        if (data !== "") {
            return 1
        }
        else {
            return 0
        }
    }
    else if (type = "number") {
        if (data != "") {
            const x = parseInt(data)
            if (Number.isNaN(x)) {
                // console.log("Empty")
                // console.log("Expected Number got:",data)
                return 0
            }
            else {
                // console.log(data,"number",x);
                return 1
            }
        }
        else {
            return 0
        }
    }
    else if (type == "boolean") {
        if (data != "") {
            if (data == "true" || data == "false") {
                return 1
            }
            else {
                return 0
            }
        }
        else {
            return 0
        }
    }
    else if (type = "date") {
        if (data != "") {
            var mydate = new Date(data);
            if (mydate == "Invalid Date") {
                return 0
            }
            else {
                // console.log(mydate.toDateString());
                return 1
            }
        }
        else {
            return 0
        }
    }
    else if (type = "array") {
        if (data != "") {
            if (Array.isArray(data)) {
                return 1
            }
            else {
                return 0
            }
        }
        else {
            return 0
        }
    }
    return 0
}


function HomePage() {

    return (
        <div>
            <h1>Admin Page</h1>
            <div className="content">
                Enter Validator file
                <input type="file" onChange={takeValidator} />
                {/* Enter Scene JSON file
                <input type="file" onChange={validateFile} /> */}
            </div>



        </div>

    )

}

export default HomePage;